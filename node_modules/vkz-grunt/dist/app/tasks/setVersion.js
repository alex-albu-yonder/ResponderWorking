module.exports = function (grunt) {

    grunt.registerTask('setVersion', 'Sets the project version to a new (higher) version', function (versionNumber) {
        var splittedVersionNumber = checkVersionValidityAndSplit(versionNumber);

        var generalVersionNumber = getGeneralVersionNumber(splittedVersionNumber);
        var versionCodeAndroid = getBuildNumber(splittedVersionNumber);

        //Change config.xml
        var dom = require('xmldom').DOMParser;

        var xml = grunt.file.read('config.xml');
        var doc = new dom().parseFromString(xml);
        doc.documentElement.setAttribute('version', generalVersionNumber);
        doc.documentElement.setAttribute('android-versionCode', versionCodeAndroid + 8); //+8 will fix old cordova version numbering that was used in the early releases Responer/Intaker
        doc.documentElement.setAttribute('ios-CFBundleVersion', versionCodeAndroid);

        grunt.file.write('config.xml', doc);

        //Change config.json
        var pathConfigJson = 'config/config.json';
        var configJson = grunt.file.readJSON(pathConfigJson);
        configJson.version = splittedVersionNumber.join(".");
        grunt.file.write(pathConfigJson, JSON.stringify(configJson, null, '\t'));

        function checkVersionValidityAndSplit(versionNumber) {
            if (typeof versionNumber === 'undefined') { grunt.warn('Version number not specified'); }

            if (versionNumber.indexOf('v') === -1) { grunt.warn('Not a right format for versionnumber. A versionnumber requires a prefix v'); }

            var strippedVersionNumber = versionNumber.replace('v', '');

            var versionNumbersArr = strippedVersionNumber.split('.');

            if (versionNumbersArr.length !== 4) {
                grunt.warn('Version number must be of format "v*.*.*.*"');
            }

            return versionNumbersArr;
        }

        function getBuildNumber(splittedVersionNumber) {
            var buildNumber = '';

            for (var i = 0 ; i < splittedVersionNumber.length ; i++) {

                if (i === 0) {
                    buildNumber += splittedVersionNumber[i];
                    continue;
                }

                if (splittedVersionNumber[i] <= 9) { buildNumber += '0' + splittedVersionNumber[i]; }
                else { buildNumber += splittedVersionNumber[i]; }
            }

            return buildNumber;
        }

        function getGeneralVersionNumber(splittedVersionNumber) {
            var newArray = splittedVersionNumber.slice();
            newArray.pop();
            return newArray.join(".");
        }
    });
};
