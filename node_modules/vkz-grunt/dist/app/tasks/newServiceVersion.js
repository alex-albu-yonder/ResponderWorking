module.exports = function (grunt) {

    grunt.registerTask('newServiceVersion', 'Creates a new release folder based on the latest release findable', function (versionNumber) {

        // === 
        // validation
        // ===
        if (typeof versionNumber === 'undefined') { grunt.warn('Version number not specified'); }

        if (versionNumber.indexOf('v') === -1) { grunt.warn('Not a right format for versionnumber. A versionnumber requires a prefix v'); }

        //Optional: more validation

        // ===
        // Change config
        // ===
        var versions = grunt.config('config').supportedServices;
        versions.push(versionNumber);
        grunt.config.set('config.targettedService', versionNumber);
        grunt.config.set('config.supportedServices', versions);
        grunt.file.write('config/config.json', JSON.stringify(grunt.config.data.config, null, '\t'));

        grunt.task.run('copy:newRelease');

        grunt.task.registerTask('newReleaseVersionSubTask', 'Change verklizan.json to reflect the right changes in versionnumber', function () {
            var buildPathVerklizanJson = 'src/versions/' + grunt.config('config').targettedService + "/" + 'verklizan.json';
            var verklizanJson = grunt.file.readJSON(buildPathVerklizanJson);
            verklizanJson.serviceVersionSupported = versionNumber;
            grunt.file.write(buildPathVerklizanJson, JSON.stringify(verklizanJson, null, '\t'));
        });

        grunt.task.run('newReleaseVersionSubTask');
    });
};