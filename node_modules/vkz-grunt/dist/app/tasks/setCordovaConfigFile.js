module.exports = function (grunt) {

    grunt.registerTask('setCordovaConfigFile', 'Replaces engine and plugin versions that are present in the config.xml file cordova uses.', function (targettedVersion) {

		//Load plugins and engine versions
		var pathCordovaVersions = 'node_modules/vkz-grunt/dist/app/cordovaVersions.json';
		var cordovaVersions = grunt.file.readJSON(pathCordovaVersions);

        //Change config.xml
        var dom = require('xmldom').DOMParser;
        var xml = grunt.file.read('config.xml');
        var doc = new dom().parseFromString(xml);

        console.log('----------------------------------------');
        console.log('----------------------------------------');
        console.log('Changing Cordova versions');
        console.log('----------------------------------------');
        console.log('----------------------------------------');

		var changedConfig = false;
		for (var i = 0; i < doc.documentElement.childNodes.length; i++) {
			var childNode = doc.documentElement.childNodes[i];
			setCorrectEngineForNode(childNode);
		}

		if(changedConfig === true) {
        	grunt.file.write('config.xml', doc);
		} else {
			console.log('No changes made');
		}

		console.log('----------------------------------------');
		console.log('----------------------------------------');
		console.log('Changing Cordova versions finished');
		console.log('----------------------------------------');
		console.log('----------------------------------------');

		function setCorrectEngineForNode(node) {
			if(node.tagName === 'engine') {
				if(node.getAttribute('name') === 'ios') {
					setiOSEngine(node);
				}
				if(node.getAttribute('name') === 'android') {
					setAndroidEngine(node);
				}
			}

			if(node.tagName === 'plugin') {
				setPluginVersion(node);
			}
		}

		function setiOSEngine(node) {
            var engineVersion = node.getAttribute('version');
			if(engineVersion !== cordovaVersions.ios.engine){
				node.setAttribute('version', cordovaVersions.ios.engine);
				changedConfig = true;
                logChangedConfig(node.getAttribute('name'), cordovaVersions.ios.engine, engineVersion);
			}
		}

		function setAndroidEngine(node) {
            var engineVersion = node.getAttribute('spec');
			if(engineVersion !== cordovaVersions.android.engine){
				node.setAttribute('spec', cordovaVersions.android.engine);
				changedConfig = true;
                logChangedConfig(node.getAttribute('name'), cordovaVersions.android.engine, engineVersion);
			}
		}

		function setPluginVersion(node) {
			var nodeName = node.getAttribute('name');
            var pluginVersion = node.getAttribute('spec');

			if(pluginVersion !== cordovaVersions.plugins[nodeName] && typeof cordovaVersions.plugins[nodeName] !== 'undefined'){
				node.setAttribute('spec', cordovaVersions.plugins[nodeName]);
                changedConfig = true;
				logChangedConfig(nodeName, cordovaVersions.plugins[nodeName], pluginVersion);
			}
		}

        function logChangedConfig(nodeName, versionNumber, oldVersionNumber) {
            console.log('updated ' + nodeName + ' version: ' + oldVersionNumber + ' => ' + versionNumber);
        }

    });

};
